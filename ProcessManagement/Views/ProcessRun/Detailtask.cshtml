@model ProcessManagement.Models.TaskProcessRun

@{
    ViewBag.Title = "Detailtask";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userRole = ViewData["UserRoles"] as ProcessManagement.Models.Participate;
    var isManager = userRole.IsManager;
    var inputConfig = ViewData["ValueInput"] as JObject;
    var fileConfig = ViewData["ValueFile"] as JObject;
    var idUser = ViewData["UserId"];
    var role = ViewData["Rolerun"] as ProcessManagement.Models.RoleRun;
    //rule
    var textLength = ViewData["TextMaxLength"] as ProcessManagement.Models.ConfigRule;
    var maxFileSizeRule = ViewData["FileMaxSize"] as ProcessManagement.Models.ConfigRule;
    var files = ViewData["Files"] as List<ProcessManagement.Models.FileManager>;
}

@section CustomCss{
    <link rel="stylesheet" href="~/Content/vendor/dropify/css/dropify.min.css">
    <link rel="stylesheet" href="~/Content/vendor/select2/select2.css" />
    <link rel="stylesheet" href="~/Content/vendor/switchery/dist/switchery.min.css" />
}

<div class="block-header">
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <h2><a href="javascript:void(0);" class="btn btn-xs btn-link btn-toggle-fullwidth primary-theme"><i class="fa fa-arrow-left"></i></a>Submit Task</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="~/Home/Index" class="primary-theme"><i class="icon-home"></i></a></li>
                <li class="breadcrumb-item"><a href="/" class="primary-theme">Groups</a></li>
                <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "Show", groupid = Model.StepRun.ProcessRun.Process.IdGroup })" class="primary-theme">@Model.StepRun.ProcessRun.Process.Group.Name</a></li>
                <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "processrun", action = "detail", processid = Model.StepRun.ProcessRun.Process.Id })" class="primary-theme">@Model.StepRun.ProcessRun.Name</a></li>
                <li class="breadcrumb-item"><a href="" class="primary-theme">@Model.StepRun.Name</a></li>
                <li class="breadcrumb-item"><a href="" class="primary-theme"> @Model.Name</a></li>
            </ul>
        </div>
        <div class="col-lg-6 col-md-4 col-sm-12 text-right">
            <div class="bh_chart hidden-xs">
                <div class="float-left m-r-15">
                    <small>Visitors</small>
                    <h6 class="mb-0 mt-1"><i class="icon-user"></i> 1,784</h6>
                </div>
                <span class="bh_visitors float-right">2,5,1,8,3,6,7,5</span>
            </div>
            <div class="bh_chart hidden-sm">
                <div class="float-left m-r-15">
                    <small>Visits</small>
                    <h6 class="mb-0 mt-1"><i class="icon-globe"></i> 325</h6>
                </div>
                <span class="bh_visits float-right">10,8,9,3,5,8,5</span>
            </div>
            <div class="bh_chart hidden-sm">
                <div class="float-left m-r-15">
                    <small>Chats</small>
                    <h6 class="mb-0 mt-1"><i class="icon-bubbles"></i> 13</h6>
                </div>
                <span class="bh_chats float-right">1,8,5,6,2,4,3,2</span>
            </div>
        </div>
    </div>
</div>
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body" id="show-task">
                <div class="row clearfix disable-all">
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label for="task-name" class="required">Task Name</label>
                            <input type="text" class="form-control" id="task-name" name="@Html.NameFor(m => m.Name)" value="@Model.Name">
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <label for="task-role">Select Role</label>
                            <select id="task-role" class="form-control show-tick ms select2">
                                @if (Model.IdRole == null)
                                {
                                    <option></option>
                                }
                                else
                                {
                                    <option>@Model.Role.Name</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="task-description">Description</label>
                            <textarea class="form-control" rows="5" placeholder="Write something about your task (optional)" id="task-description" name="@Html.NameFor(m => m.Description)">@Model.Description</textarea>
                        </div>
                    </div>
                    <div class="col-sm-12">
                        @Html.Partial("~/Views/Shared/Common/_File.cshtml", new ViewDataDictionary { { "filess", files }, { "isRun", true } })
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@if (idUser.ToString() == role.IdUser || isManager == true)
{
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="body" id="show-taskrun">
                    <div class="row clearfix cw-validation @if (Model.Status1.Name != "Open") { WriteLiteral("disable-all"); } ">
                        <div class="col-sm-12">
                            <div class="form-group">
                                @{
                                    string textLabel;
                                    if ((string)inputConfig["label"] == "")
                                    {
                                        textLabel = "Response Text";
                                    }
                                    else
                                    {
                                        textLabel = (string)inputConfig["label"];

                                    }
                                    bool textRequired = (bool)inputConfig["required"];
                                    int maxlength = (string)inputConfig["maxlength"] != "" ? (int)inputConfig["maxlength"] : textLength.Value;
                                }
                                <label @if (textRequired) { WriteLiteral("class='required' "); } for="task-inputtext">@textLabel</label>
                                <input type="text" class="form-control" id="task-inputtext" @if (textRequired) { WriteLiteral("cw-required"); } cw-maxlength="@maxlength" value="@inputConfig["value"]">
                            </div>
                        </div>
                        <div class="col-sm-12">
                            <div class="form-group">

                                @{
                                    string fileLabel;
                                    if ((string)fileConfig["label"] == "")
                                    {
                                        fileLabel = "Upload File";
                                    }
                                    else
                                    {
                                        fileLabel = (string)fileConfig["label"];

                                    }
                                    bool fileRequired = (bool)fileConfig["required"];
                                    string maxSize = (string)fileConfig["size"] != "" ? (string)fileConfig["size"] : string.Format("{0}{1}", maxFileSizeRule.Value,maxFileSizeRule.Unit);
                                }
                                <label @if (fileRequired) { WriteLiteral("class='required' "); } for="task-inputfile">@fileLabel</label>
                                <input type="file" id="task-inputfile" class="dropify" @if (fileRequired) { WriteLiteral("cw-required"); } cw-maxsize="@maxSize"/>
                            </div>
                        </div>
                        @if (Model.Status1.Name == "Finish")
                        {
                            <div class="col-sm-8">
                                <div class="form-group">
                                    <label for="">Approve By</label>
                                    <input type="text" class="form-control" id="task-name" name="" value="@Model.AspNetUser.UserName" disabled>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <label for="">Date</label>
                                <input type="text" class="form-control" id="task-name" name="" value="@Model.Approve_At" disabled>
                            </div>
                        }
                    </div>
                    <div class="row clearfix">
                        <div class="col-sm-12" id="button-action">
                            @if (Model.Status1.Name == "Open")
                            {
                                <button id="btn-savetask" class="btn btn-primary-theme waves-effect" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Saving..."><i class="fa fa-save"></i> Save</button>
                                <button id="btn-donetask" class="btn btn-primary-theme waves-effect" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Submiting..."><i class="fa fa-check"></i> Submit</button>
                            }
                            @if (Model.Status1.Name == "Done")
                            {
                                if (isManager)
                                {
                                    <button id="btn-opentask" value="@Model.Id" class="btn btn-primary-theme waves-effect" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Opening...">Open</button>
                                    <button id="btn-finishtask" value="@Model.Id" class="btn btn-primary-theme waves-effect" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Finishing...">Finish </button>
                                }
                                <a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "processrun", action = "detail", processid = Model.StepRun.ProcessRun.IdProcess })" class="btn btn-success">Back</a>

                            }
                            @if (Model.Status1.Name == "Finish")
                            {
                                if (isManager)
                                {
                                    <button id="btn-opentask" value="@Model.Id" class="btn btn-primary-theme waves-effect" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Opening...">Open</button>
                                }
                                <a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "processrun", action = "detail", processid = Model.StepRun.ProcessRun.IdProcess })" class="btn btn-success">Back</a>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section CustomScripts{
    <script src="~/Content/vendor/dropify/js/dropify.min.js"></script>
    <script src="~/Content/build/js/pages/forms/dropify.js"></script>
    <script src="~/Content/vendor/select2/select2.min.js"></script>
    <script>
            $(function () {
                var form = $(".cw-validation").formValidation();
                var drEvent = $(".dropify").dropify();
                drEvent.on('dropify.afterClear', function (event, element) {
                    var element = $(this);
                    form.validate(element);
                });
                //TODO: Add TaskRun Authenticate
                $("#btn-savetask").on("click", function () {
                    var $this = $(this);
                    toggleLoading($this);
                    var valuetext = $("#task-inputtext").val();
                    var valuefile = $("#task-inputfile").val();

                    let data = {
                        valuetext: valuetext,
                        valuefile: valuefile,
                        idtaskrun: @Model.Id
                    }
                    setTimeout(function () {
                        saveTaskRun(data);
                        toggleLoading($this);
                    }, 1000);
                });
                //TODO: Add TaskRun Authenticate
                $("#btn-donetask").on("click", function () {
                    var $this = $(this);
                    var isFormHaveError = form.validates();
                    if (isFormHaveError) {
                        showToastr("error", "Error!!");

                    } else {
                        var valuetext = $("#task-inputtext").val();
                        var valuefile = $("#task-inputfile").val();

                        let data = {
                            valuetext: valuetext,
                            valuefile: valuefile,
                            idtaskrun: @Model.Id
                        }
                        setConfirm(`Are you sure you want to submit this task?`, function () {
                            toggleLoading($this);
                            setTimeout(function () {
                                submitTaskRun(data);
                                toggleLoading($this);
                            }, 1000);
                        });
                    }
                });
                $('#btn-opentask').on('click', function () {
                    let data = {
                        idtask: @Model.Id
                    };
                    var $this = $(this);
                    setConfirm(`Are you sure you want to open this task?`, function () {
                        toggleLoading($this);
                        setTimeout(function () {
                            submitopentask(data);
                            toggleLoading($this);
                        }, 1000);
                    });
                });
                $('#btn-finishtask').on('click', function () {
                    var $this = $(this);
                    let data = {
                        idtask: @Model.Id
                    }
                    setConfirm(`Are you sure you want to open this task?`, function () {
                        toggleLoading($this);
                        setTimeout(function () {
                            submitfinishtask(data);
                            toggleLoading($this);
                        }, 1000);
                    });
                });
            });
            function saveTaskRun(data) {
                $.ajax({
                    url: "@Url.Action("savetaskrun", "processrun",new { area = "api"})",
                    type: "POST",
                    data: data,
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response.status == 200) {
                            showToastr("success", response.message, "toast-bottom-left")
                        } else {
                            showToastr("error", response.message, "toast-bottom-left")
                        }
                    }
                });
            }
            function submitTaskRun(data) {
                $.ajax({
                    url: "@Url.Action("submittaskrun", "processrun",new { area = "api"})",
                    type: "POST",
                    data: data,
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response.status == 200) {
                            //showToastr("error", "Error!!", "toast-bottom-left")
                            window.location.reload();
                            console.error(response)
                        }
                    }
                });
            }
            function submitfinishtask(data) {
                $.ajax({
                    url: "@Url.Action("submitfinishtask", "processrun",new { area = "api"})",
                    type: "POST",
                    data: data,
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response.status == 200) {
                            //showToastr("error", "Error!!", "toast-bottom-left")
                            window.location.reload();
                            console.error(response)
                        }
                    }
                });
            }

            function submitopentask(data) {
                $.ajax({
                    url: "@Url.Action("submitopentask", "processrun",new { area = "api"})",
                    type: "POST",
                    data: data,
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response.status == 200) {
                            //showToastr("error", "Error!!", "toast-bottom-left")
                            window.location.reload();
                            console.error(response)
                        }
                    }
                });
            }
    </script>
}
