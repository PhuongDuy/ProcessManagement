@model ProcessManagement.Models.TaskProcessRun
@using ProcessManagement.Models;
@{
    PMSEntities db = new PMSEntities();
    ViewBag.Title = "Detailtaskform";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userRole = ViewData["UserRoles"] as ProcessManagement.Models.Participate;
    var isManager = userRole.IsManager;
    var idUser = ViewData["UserId"];
    var role = ViewData["Rolerun"] as ProcessManagement.Models.RoleRun;
}

@section CustomCss{

}

<div class="block-header">
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <h2><a href="javascript:void(0);" class="btn btn-xs btn-link btn-toggle-fullwidth primary-theme"><i class="fa fa-arrow-left"></i></a>Submit Task</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="~/Home/Index" class="primary-theme"><i class="icon-home"></i></a></li>
                <li class="breadcrumb-item"><a href="/" class="primary-theme">Groups</a></li>
                <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "Show", groupid = Model.StepRun.ProcessRun.Process.IdGroup })" class="primary-theme">@Model.StepRun.ProcessRun.Process.Group.Name</a></li>
                <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "processrun", action = "detail", processid = Model.StepRun.ProcessRun.IdProcess })" class="primary-theme">@Model.StepRun.ProcessRun.Name</a></li>
                <li class="breadcrumb-item"><a href="" class="primary-theme">@Model.StepRun.Name</a></li>
                <li class="breadcrumb-item"><a href="" class="primary-theme"> @Model.Name</a></li>
            </ul>
        </div>
        <div class="col-lg-6 col-md-4 col-sm-12 text-right">
            <div class="bh_chart hidden-xs">
                <div class="float-left m-r-15">
                    <small>Visitors</small>
                    <h6 class="mb-0 mt-1"><i class="icon-user"></i> 1,784</h6>
                </div>
                <span class="bh_visitors float-right">2,5,1,8,3,6,7,5</span>
            </div>
            <div class="bh_chart hidden-sm">
                <div class="float-left m-r-15">
                    <small>Visits</small>
                    <h6 class="mb-0 mt-1"><i class="icon-globe"></i> 325</h6>
                </div>
                <span class="bh_visits float-right">10,8,9,3,5,8,5</span>
            </div>
            <div class="bh_chart hidden-sm">
                <div class="float-left m-r-15">
                    <small>Chats</small>
                    <h6 class="mb-0 mt-1"><i class="icon-bubbles"></i> 13</h6>
                </div>
                <span class="bh_chats float-right">1,8,5,6,2,4,3,2</span>
            </div>
        </div>
    </div>
</div>
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body" id="show-task">
                <div class="row clearfix">
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label for="task-name" class="required">Task Name</label>
                            <input type="text" class="form-control" id="task-name" name="@Html.NameFor(m => m.Name)" value="@Model.Name" disabled>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <label for="task-role">Select Role</label>
                        <select id="task-role" class="form-control show-tick ms select2" disabled>
                            @if (Model.IdRole == null)
                            {
                                <option></option>
                            }
                            else
                            {
                                <option>@Model.Role.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label for="task-description">Description</label>
                    <textarea class="form-control" rows="2" placeholder="Write something about your task (optional)" id="task-description" name="@Html.NameFor(m => m.Description)" disabled>@Model.Description</textarea>
                </div>
            </div>
        </div>
    </div>
</div>
@if (idUser.ToString() == role.IdUser || isManager == true)
{
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="card">
                <div class="body" id="show-taskrun">
                    <div class="row clearfix">
                        <div class="col-sm-12 setDataWrap">
                            <form class="render-wrap" id="render-wrap"></form>
                        </div>
                        @if (Model.Status1.Name == "Finish")
                        {
                        <div class="col-sm-8">
                            <div class="form-group">
                                <label for="">Approve By</label>
                                <input type="text" class="form-control" id="task-name" name="" value="@Model.AspNetUser.UserName" disabled>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <label for="">Date</label>
                            <input type="text" class="form-control" id="task-name" name="" value="@Model.Approve_At" disabled>
                        </div>
                        }
                        <div class="col-sm-12">
                            <div class="mt-2" id="button-action">
                                @if (Model.Status1.Name == "Open")
                                {
                                    <button id="btn-savetask" value="@Model.Id" class="btn btn-primary-theme">Save</button>
                                    <button id="btn-donetask" value="@Model.Id" class="btn btn-primary-theme">Done</button>
                                }
                                @if (Model.Status1.Name == "Done")
                                {
                                    <a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "processrun", action = "detail", processid = Model.StepRun.ProcessRun.IdProcess })" class="btn btn-success">Back</a>
                                    if (isManager)
                                    {
                                        <button id="btn-opentask" value="@Model.Id" class="btn btn-primary-theme">Open</button>
                                        <button id="btn-finishtask" value="@Model.Id" class="btn btn-primary-theme">Finish </button>
                                    }
                                }
                                @if (Model.Status1.Name == "Finish")
                                {
                                    <a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "processrun", action = "detail", processid = Model.StepRun.ProcessRun.IdProcess })" class="btn btn-success">Back</a>
                                    if (isManager)
                                    {
                                        <button id="btn-opentask" value="@Model.Id" class="btn btn-primary-theme">Open</button>
                                    }

                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section CustomScripts{
    <script src="~/Content/vendor/FormBuilder/form-builder.min.js"></script>
    <script src="~/Content/vendor/FormBuilder/form-render.min.js"></script>

    <script>
        var taskform = '@Model.ValueFormJson'.replace(/&quot;/g, "\"").replace(/&#244;/gi, "ô").replace(/&#224;/gi, "à");
        var formData = taskform;
        if (taskform != null) {
            $("#render-wrap").formRender({formData});
        }

        $(function () {
            $('#btn-savetask').on('click', function () {
                let formrender = $("#render-wrap").formRender("userData");
                let j = 0;
                let tempArr = [];
                let form = JSON.parse(formData);
                for (let i = 0; i < formrender.length; i++) {
                    for (let k = 0; k < form.length; k++) {
                        if (form[k]["name"] == formrender[i]["name"] && formrender[i]["required"] == true && (formrender[i]["userData"] == "" /*|| formrender[i]["userData"] == undefined*/)) {
                            j++;
                        }
                        if (form[k]["name"] == formrender[i]["name"] && form[k]["required"] == formrender[i]["required"] && form[k]["userData"] == formrender[i]["userData"]) {
                            tempArr.push(form[k]);
                        }
                        if (form[k]["name"] == formrender[i]["name"] && form[k]["required"] == formrender[i]["required"] && form[k]["userData"] != formrender[i]["userData"]) {
                            tempArr.push(formrender[i]);
                        }
                    }
                }

                for (let i = 0; i < formrender.length; i++) {
                    if (formrender[i]["type"] == "textarea") {

                    }
                }

                if (j == 0) {
                    let check = confirm("Save task?");
                    if (check) {
                        let data = {
                            idtaskrun: @Model.Id,
                            formrender: JSON.stringify(tempArr)
                        };
                        savetaskform(data);
                    }
                } else {
                    alert('Some required not null!');
                    return false;
                }
            })
        });

        $(function () {
            $('#btn-donetask').on('click', function () {
                let formrender = $("#render-wrap").formRender("userData");
                let j = 0;
                let tempArr = [];
                let form = JSON.parse(formData);
                for (let i = 0; i < formrender.length; i++) {
                    for (let k = 0; k < form.length; k++) {
                        if (form[k]["name"] == formrender[i]["name"] && formrender[i]["required"] == true && (formrender[i]["userData"] == "" /*|| formrender[i]["userData"] == undefined*/)) {
                            j++;
                        }
                        if (form[k]["name"] == formrender[i]["name"] && form[k]["required"] == formrender[i]["required"] && form[k]["userData"] == formrender[i]["userData"]) {
                            tempArr.push(form[k]);
                        }
                        if (form[k]["name"] == formrender[i]["name"] && form[k]["required"] == formrender[i]["required"] && form[k]["userData"] != formrender[i]["userData"]) {
                            tempArr.push(formrender[i]);
                        }
                    }
                }

                for (let i = 0; i < tempArr.length; i++) {
                    tempArr[i]["disabled"] = "undefined";
                }

                if (j == 0) {
                    let check = confirm("Done task?");
                    if (check) {
                        let data = {
                            idtaskrun: @Model.Id,
                            formrender: JSON.stringify(tempArr)
                        };
                        donetaskform(data);
                    }
                } else {
                    alert('Some required not null!');
                    return false;
                }
            })
        });

            function savetaskform(data) {
                    $.ajax({
                        url: "@Url.Action("savetaskform", "processrun", new { area = "api"})",
                        type: "POST",
                        data: data,
                        dataType: "json",
                        success: function (response) {
                            console.log(response);
                            if (response.status == 200) {
                                //showToastr("error", "Error!!", "toast-bottom-left")
                                window.location.reload();
                                console.error(response)
                            }
                        }
                    });
            }

            function donetaskform(data) {
                    $.ajax({
                        url: "@Url.Action("donetaskform", "processrun", new { area = "api"})",
                        type: "POST",
                        data: data,
                        dataType: "json",
                        success: function (response) {
                            console.log(response);
                            if (response.status == 200) {
                                //showToastr("error", "Error!!", "toast-bottom-left")
                                window.location.reload();
                                console.error(response)
                            }
                        }
                    });
            }

            $(function () {
                var idtask = $('#btn-finishtask').val();
                $('#btn-finishtask').on('click', function () {
                    let check = confirm("Finish task?");
                    if (check) {
                        let data = {
                            idtask: idtask
                        }
                        submitfinishtask(data);
                    }
                })
            })

            $(function () {
                var idtask = $('#btn-opentask').val();
                $('#btn-opentask').on('click', function () {
                    let formrender = $("#render-wrap").formRender("userData");
                    let tempArr = [];
                    for (let i = 0; i < formrender.length; i++) {
                        tempArr.push(formrender[i]);
                    }
                    for (let i = 0; i < tempArr.length; i++) {
                        tempArr[i]["disabled"] = "";
                    }
                    let check = confirm("Open task?");
                    if (check) {
                        let data = {
                            idtask: idtask,
                            formrender: JSON.stringify(tempArr)
                        }
                        submitopentask(data);
                    }

                })
            })

            function submitfinishtask(data) {
                $.ajax({
                    url: "@Url.Action("submitfinishtask", "processrun",new { area = "api"})",
                    type: "POST",
                    data: data,
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response.status == 200) {
                            //showToastr("error", "Error!!", "toast-bottom-left")
                            window.location.reload();
                            console.error(response)
                        }
                    }
                });
            }

            function submitopentask(data) {
                $.ajax({
                    url: "@Url.Action("submitopentask", "processrun",new { area = "api"})",
                    type: "POST",
                    data: data,
                    dataType: "json",
                    success: function (response) {
                        console.log(response);
                        if (response.status == 200) {
                            //showToastr("error", "Error!!", "toast-bottom-left")
                            window.location.reload();
                            console.error(response)
                        }
                    }
                });
            }

    </script>

}

