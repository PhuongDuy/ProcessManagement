
@model ProcessManagement.Models.Group
@using Newtonsoft.Json.Linq;
@{
    var showGaneralSetting = TempData["GaneralSetting"] != null ? "in" : "";
}
<section class="settings">
    <div class="settings-header">
        <h4>General Group</h4>
        <button class="btn btn-default" type="button" data-toggle="collapse" data-target="#genaral-settings" aria-expanded="false" aria-controls="genaral-settings">
            Expand
        </button>
        <p>
            Update your group name, description, avatar, and other general settings.
        </p>
    </div>
    <div class="settings-content collapse @showGaneralSetting" id="genaral-settings">
        @using (Html.BeginForm("Edit", "Group", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <br />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <div class="row">
                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "cw-required" })
                        <div>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", value = Model.Name } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Description)
                    <div>
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 7, value = Model.Description })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Avatar, "Avatar Group")
                    <div>
                        <div class="row">
                            <div class="col-md-2">
                                <label class="label">
                                    <i class="fas fa-paperclip"></i>
                                    <span class="title">Add Image</span>
                                    <input type="file" name="ImageGr" id="imgInp" />
                                </label>
                            </div>
                            <div class="col-md-10">
                                @if (Model.Avatar != null)
                                {
                                    <img style="width: 200px;height: auto" id='img-upload' src="~/Content/images/workspace/@Model.Avatar" />
                                }
                                else
                                {
                                    JObject defaultAvatar = JObject.Parse(Model.AvatarDefault);
                                    <img style="width: 200px;height: auto" id='img-upload' src=""/>
                                    <div class="avatar-default" style="background-color:@defaultAvatar["background"]">
                                        @defaultAvatar["name"]
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    @if (Model.Avatar != null)
                    {
                        <a href="@Url.Action("RemoveAvatar","Group",new { id = Model.Id})" class="btn btn-danger" onclick="return confirmBeforRemoveAvatar()">Reset Avatar</a>
                    }
                    <button class="btn btn-success" type="submit">Save Change</button>
                </div>
            </div>
        }
    </div>
</section>