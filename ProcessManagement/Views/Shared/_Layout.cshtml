<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=Edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Process Management System">
    <meta name="author" content="CAP2019, design by: Clockworks Team">
    <title>:: Lucid System :: @ViewBag.Title</title>
    <style>
        .page-loader-wrapper {
            display: block;
        }
    </style>
    @Styles.Render("~/Content/css")
    @if (IsSectionDefined("CustomCss"))
    {
        @RenderSection("CustomCss", required: false)
    }
    <link href="~/Content/build/css/main.css" rel="stylesheet" />
    <link href="~/Content/build/css/custom.css" rel="stylesheet" />
</head>
<body>
    @Html.Partial("~/Views/Shared/Common/_Loader.cshtml")
    <div id="wrapper">
        <!-- header -->
        @Html.Partial("~/Views/Shared/Common/_Header.cshtml")
        <!-- end of header -->
        <!-- menu left -->
        @Html.Partial("~/Views/Shared/Common/_Left.cshtml")
        <!-- end of menu left -->
        <!-- main content -->
        <div id="main-content">
            <div class="container-fluid" id="content">
                @RenderBody()
            </div>
            @Html.Partial("~/Views/Shared/Common/_Footer.cshtml")
            <!-- end of body content -->
        </div>
    </div>
    @Scripts.Render("~/Content/js")
    <script src="~/signalr/hubs" type="text/javascript"></script>
    @if (IsSectionDefined("CustomScripts"))
    {
        @RenderSection("CustomScripts", required: false)
    }
    @{
        string text = (string)TempData["FlashMessage.Text"];
        string flash = "";
        if (!string.IsNullOrWhiteSpace(text))
        {
            FlashType type = (FlashType)TempData["FlashMessage.Type"];
            FlashPosition position = (FlashPosition)TempData["FlashMessage.Position"];
            string positionClass;
            switch (position)
            {
                case FlashPosition.BottomRight:
                    positionClass = "toast-bottom-right";
                    break;
                case FlashPosition.BottomLeft:
                    positionClass = "toast-bottom-left";
                    break;
                case FlashPosition.TopLeft:
                    positionClass = "toast-top-left";
                    break;
                case FlashPosition.TopRight:
                    positionClass = "toast-top-right";
                    break;
                case FlashPosition.TopCenter:
                    positionClass = "toast-top-center";
                    break;
                case FlashPosition.BottomCenter:
                    positionClass = "toast-bottom-center";
                    break;
                default:
                    positionClass = "toast-bottom-left";
                    break;
            }
            flash = string.Format("\"{0}\", \"{1}\", \"{2}\"", type, text, positionClass);

        }
    }
    <script type="text/javascript">
        $(function () {
            @if (flash != "") { 
                @:showToastr(@Html.Raw(flash));
            }
            updateNotification();
            $("#btn-notification").on("click", function () {
                
            });
            var notificationHub = $.connection.notificationHub;
            $.connection.hub.start().done(function () {
                console.info("Notification hub started");
            });
            notificationHub.client.updateNotify = function () {
                updateNotification();
            }
        });
        function updateNotification() {
            var notifyContainer = $("ul.notifications");
            notifyContainer.empty();
            notifyContainer.append("<li>Loading...</li>");

            $.ajax({
                type: "GET",
                url: "@Url.Action("getnotifies", "notify", new { area = "api"})",
                datatype: "json",
                success: function (response) {
                    notifyContainer.empty();
                    var notifies = response.data;
                    if (notifies.length == 0) {
                        notifyContainer.append(`<li class="header"><strong>No data available.</strong></li>`)
                    } else {
                        var countNotRead = notifies.filter(noti => noti.isread == false);
                        notifyContainer.append(`<li class="header"><strong>You have ${countNotRead.length} new Notifications</strong></li>`);
                        notifies.forEach(function (notify) {
                            notifyContainer.append(`<li>
                                    <a href="javascript:void(0);">
                                        <div class="media">
                                            <div class="media-left">
                                                <i class="icon-info text-warning"></i>
                                            </div>
                                            <div class="media-body">
                                                <p class="text">
                                                    ${notify.content.en}
                                                </p>
                                                <span class="timestamp">${notify.created_at}</span>
                                            </div>
                                        </div>
                                    </a>
                                </li>`);
                        });
                        notifyContainer.append(`<li class="footer"><a href="javascript:void(0);" class="more">See all notifications</a></li>`);
                    }
                }
            })
        }
        
    </script>
</body>
</html>
