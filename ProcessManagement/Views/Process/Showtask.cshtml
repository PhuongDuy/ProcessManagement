@model ProcessManagement.Models.TaskProcess

@{
    ViewBag.Title = "AddTaskProcess";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var step = ViewData["Step"] as ProcessManagement.Models.Step;
    var group = ViewData["Group"] as ProcessManagement.Models.Group;
    var roles = ViewData["ListRole"] as List<ProcessManagement.Models.Role>;
    JObject inputConfig = new JObject();
    if (Model.ValueInputText != null)
    {
        inputConfig = JObject.Parse(Model.ValueInputText);
    }
    JObject fileConfig = new JObject();
    if (Model.ValueInputFile != null)
    {
        fileConfig = JObject.Parse(Model.ValueInputFile);
    }
    var userRole = ViewData["UserRoles"] as ProcessManagement.Models.Participate;
    var isManager = userRole.IsManager;
    var files = ViewData["Files"] as List<ProcessManagement.Models.FileManager>;
    var maxFileSizeRule = ViewData["FileMaxSize"] as ProcessManagement.Models.ConfigRule;
}


@section CustomCss{
    <link rel="stylesheet" href="~/Content/vendor/dropify/css/dropify.min.css">
    <link rel="stylesheet" href="~/Content/vendor/select2/select2.css" />
    <link rel="stylesheet" href="~/Content/vendor/switchery/dist/switchery.min.css" />
}
<div class="block-header">
    <div class="row">
        <div class="col-lg-6 col-md-8 col-sm-12">
            <h2><a href="javascript:void(0);" class="btn btn-xs btn-link btn-toggle-fullwidth primary-theme"><i class="fa fa-arrow-left"></i></a> Create New Task</h2>
            <ul class="breadcrumb">
                <li class="breadcrumb-item"><a href="~/Home/Index" class="primary-theme"><i class="icon-home"></i></a></li>
                <li class="breadcrumb-item"><a href="/" class="primary-theme">Groups</a></li>
                <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "Show", groupid = group.Id })" class="primary-theme">@group.Name</a></li>
                <li class="breadcrumb-item"><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "process", action = "ShowStep", processid = step.IdProcess })" class="primary-theme">@step.Process.Name</a></li>
                <li class="breadcrumb-item"><a href="" class="primary-theme">@step.Name</a></li>
                <li class="breadcrumb-item"><a href="" class="primary-theme"> @Model.Name</a></li>
            </ul>
        </div>
        <div class="col-lg-6 col-md-4 col-sm-12 text-right">
            <div class="bh_chart hidden-xs">
                <div class="float-left m-r-15">
                    <small>Visitors</small>
                    <h6 class="mb-0 mt-1"><i class="icon-user"></i> 1,784</h6>
                </div>
                <span class="bh_visitors float-right">2,5,1,8,3,6,7,5</span>
            </div>
            <div class="bh_chart hidden-sm">
                <div class="float-left m-r-15">
                    <small>Visits</small>
                    <h6 class="mb-0 mt-1"><i class="icon-globe"></i> 325</h6>
                </div>
                <span class="bh_visits float-right">10,8,9,3,5,8,5</span>
            </div>
            <div class="bh_chart hidden-sm">
                <div class="float-left m-r-15">
                    <small>Chats</small>
                    <h6 class="mb-0 mt-1"><i class="icon-bubbles"></i> 13</h6>
                </div>
                <span class="bh_chats float-right">1,8,5,6,2,4,3,2</span>
            </div>
        </div>
    </div>
</div>
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body" id="show-task">
                <div class="row clearfix">
                    <div class="col-md-12 col-sm-12">
                        @Html.Partial("~/Views/Shared/Common/_File.cshtml", files)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="body" id="show-task">
                <div class="row clearfix">
                    <div class="col-sm-8">
                        <div class="form-group">
                            <label for="task-name" class="required">Task Name</label>
                            <input type="text" class="form-control" id="task-name" name="@Html.NameFor(m => m.Name)" value="@Model.Name" disabled>
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <label for="task-role">Select Role</label>
                        <select id="task-role" class="form-control show-tick ms select2" disabled>
                            <option></option>
                            @foreach (var role in roles.Where(x => x.IsRun == null || x.IsRun == false))
                            {
                                <option value="@role.Id">@role.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row clearfix">
                    <div class="col-sm-12">
                        <div class="form-group">
                            <label for="task-description">Description</label>
                            <textarea class="form-control" rows="6" placeholder="Write something about your task (optional)" id="task-description" name="@Html.NameFor(m => m.Description)" disabled>@Model.Description</textarea>
                        </div>
                    </div>
                    <div class="col-sm-12 ">
                        <div class="choose-type row">
                            <div class="choose-item col-sm-12 form-group" id="choose-input">
                                <fieldset>
                                    <legend>Response Text</legend>
                                    <div class="row" style="margin-left:0;margin-right:0;">
                                        <div class="col-sm-2">
                                            <div class="form-group input-has-prefix char">
                                                <label for="text-maxlength">Max Length</label>
                                                <input id="text-maxlength" type="number" maxlength="17" class="form-control limit-length" value="@inputConfig["maxlength"]" disabled>
                                            </div>
                                        </div>
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="text-label">Response Label</label>
                                                <input id="text-label" type="text" class="form-control" value="@inputConfig["label"]" disabled>
                                            </div>
                                        </div>

                                        <div class="col-sm-12">
                                            <div class="form-group switch-custom">
                                                <label>Required: <input type="checkbox" class="checkbox-switch" id="text-required" @if (bool.Parse(inputConfig["required"].ToString())) { WriteLiteral("checked"); } /></label>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                            <div class="choose-item col-sm-12 form-group" id="choose-file">
                                <fieldset>
                                    <legend>Response File</legend>
                                    <div class="row" style="margin-left:0;margin-right:0;">
                                        <div class="col-sm-2">
                                            <div class="form-group input-has-prefix mb">
                                                <label for="file-maxsize">File Size</label>
                                                <input id="file-maxsize" type="number" maxlength="17" class="form-control limit-length" value="@fileConfig["size"]" disabled>
                                            </div>
                                        </div>
                                        <div class="col-sm-10">
                                            <div class="form-group">
                                                <label for="file-label">Response Label</label>
                                                <input id="file-label" type="text" class="form-control" value="@fileConfig["label"]" disabled>
                                            </div>
                                        </div>
                                        <div class="col-sm-12">
                                            <div class="form-group switch-custom">
                                                <label>Required: <input id="file-required" type="checkbox" class="checkbox-switch" @if (bool.Parse(fileConfig["required"].ToString())) { WriteLiteral("checked"); } /></label>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    </div>
                    @if (isManager)
                    {
                        <div class="col-sm-12">
                            <div class="mt-2" id="button-action">
                                <button id="btn-edit" class="btn btn-primary-theme">Edit</button>
                                <a href="@Url.RouteUrl("GroupControlLocalizedDefault",new { controller = "process", action = "deletetask", taskid = Model.Id })" class="btn btn-outline-danger" id="btn-remove-task">Delete</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@section CustomScripts{
    <script src="~/Content/vendor/dropify/js/dropify.min.js"></script>
    <script src="~/Content/build/js/pages/forms/dropify.js"></script>
    <script src="~/Content/vendor/select2/select2.min.js"></script>
    <script src="~/Content/vendor/switchery/dist/switchery.min.js"></script>

    <script>
        $(function () {

            var bAction = `<button id="btn-save" class="btn btn-primary-theme">Save</button>
                            <button id="btn-back" class="btn btn-outline-secondary">Back</button>`;
            var showForm = $("#show-task").html();
            var switchArr = createSwitch();
            switchArr.forEach(item => item.disable());
            $("select#task-role").select2({
                placeholder: "Select Role",
                allowClear: true,
            }).select2('val', @Model.IdRole);

            //Button edit
            $("body").on("click", "#btn-edit",function () {
                var temp = bAction;
                var $this = $(this);
                var actionButton = $this.parents("#button-action");
                actionButton.html(temp);
                $("#show-task").find("input[type!='checkbox'], select#task-role, textarea").prop("disabled", function () {
                    return !$(this).prop("disabled");
                });
                switchArr.forEach(item => item.enable());
            });
            //Button back
            $("body").on("click", "#btn-back", function () {
                $("#show-task").html(showForm);
                switchArr = createSwitch();
            });
            $("body").on("click", "#btn-save", function () {
                $this = $(this);
                toggleLoading($this);

                var name = $('#task-name').val();
                var role = $('#task-role').val();
                var description = $('#task-description').val();

                //text
                var inputLabel = $('#text-label').val();
                var inputmaxLength = $('#text-maxlength').val();
                var inputRequire = $('#text-required').prop('checked') == true ? true : false;
                //file

                var fileLabel = $("#file-label").val();
                var fileSize = $('#file-maxsize').val();
                var fileRequire = $('#file-required').prop('checked') == true ? true : false;

                var inputConfig1 = {
                    label: inputLabel,
                    maxlength: inputmaxLength,
                    required: inputRequire
                };

                var fileConfig1 = {
                    label: fileLabel,
                    size: fileSize,
                    required: fileRequire
                };


                let data = {
                    name: name,
                    idRole: role,
                    description: description,
                    inputConfig: JSON.stringify(inputConfig1),
                    fileConfig: JSON.stringify(fileConfig1)
                }
                if (name == "") {
                    showToastr("error", "Task name not null", "toast-bottom-left");
                    toggleLoading($this);
                } else {
                    editTask(data);
                }
            });
            $("body").on("click", "#btn-remove-task", function () {
                var con = confirm("bạn muốn xóa task này không?");
                if (con) {
                    localStorage.setItem("showStep", @step.Id);
                }
                return con;
            })
        });
        function editTask(data) {
             $.ajax({
                url: "@Url.Action("edittask","process",new {area = "api"})",
                type: "POST",
                data: data,
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                        localStorage.setItem("showStep", @step.Id);
                        location.href = '@Url.RouteUrl("GroupControlLocalizedDefault",new { controller = "process" ,action = "showstep", groupslug = group.groupSlug, groupid = group.Id, processid = step.IdProcess })';
                    } else {
                        console.error(response)
                    }
                }
            });
        }
    </script>

    <script>
        $(function () {
            //fileupload
            @if (maxFileSizeRule != null)
            {
                int value = maxFileSizeRule.Value;
                string unit = maxFileSizeRule.Unit.ToLower().Trim();
                int pow;
                switch (unit)
                {
                    case "kb":
                        pow = 1;
                        break;
                    case "mb":
                        pow = 2;
                        break;
                    case "gb":
                        pow = 3;
                        break;
                    default:
                        pow = 0;
                        break;
                }
                double toByte = value * Math.Pow(1024, pow);
                @:var maxFileSize = @toByte;
            }
            else
            {
                @:var maxFileSize = null;
            }
            $("#btn-file").on("click", function () {
                $("#FileUpload").trigger("click");
            });
            $(document).on("click", ".btn-file-remove", function () {
                var id = this.dataset.src;
                var fileName = $(this).parents("tr").find("td:first-child").text().trim();
                setConfirm(`Are you sure you want to delete "${fileName}"?`, function () {
                    removeFile(id);
                });
            })
            $(document).on("click", ".btn-file-changename", function () {
                var id = this.dataset.src;
                var fileName = $(this).parents("tr").find("td:first-child").text().trim();
                var dialog = $.confirm({
                    title: `Change File Name (${fileName})`,
                    content:'<div class="form-group">' +
                        '<label>Filename</label>' +
                        '<input type="text" placeholder="Enter your new file name" class="name form-control" required />' +
                        '</div>',
                    columnClass: 'medium',
                    closeIcon: true,
                    closeIconClass: 'fa fa-close',
                    buttons: {
                        save: {
                            btnClass: 'btn-none waves-effect',
                            action: function () {
                                var newFileName = this.$content.find('input').val().trim();
                                if (newFileName == "") {
                                    showToastr("error", "File Name is required");
                                } else {
                                    dialog.close();
                                    setConfirm(`Are you sure you want to change from <b>${fileName}</b> to <b>${newFileName}</b>?`, function () {
                                        changeFileName(id, newFileName);
                                    });

                                }
                                return false;
                            }
                        },
                        cancel: {
                            btnClass: 'btn-none waves-effect',
                        }
                    },
                    onContentReady: function () {
                        this.$content.find("input").val(fileName);
                    },
                });
            })
            $("#FileUpload").on("change", function () {
                //var fileName = e.target.files[0].name;
                var file = this.files[0];
                var fileName = file.name;
                var fileSize = file.size;
                if (maxFileSize != null && fileSize > maxFileSize) {
                    showToastr("error", `This file is too big (@maxFileSizeRule.Value @maxFileSizeRule.Unit maximum)`);
                } else {
                    setConfirm(`Are you sure you want to upload "${fileName}"?`, function () {
                        addFile(file);
                    });
                }
                $(this).val("");

            });
        });
        function addFile(file) {
            var data = new FormData();
            data.append("FileUpload", file);
            data.append("groupid", @group.Id);
            data.append("taskid",@Model.Id)
            data.append("direction", "@FileDirection.Task");
            $.ajax({
                url: "@Url.Action("uploadfile", "file", new { area = "api"})",
                type: "POST",
                data: data,
                contentType: false,
                processData: false,
                dataType: "json",
                success: function (response) {
                    //thanh cong thi no tra du lieu ve
                    console.log(response);
                    if (response.status == 200) {
                        showToastr("success", response.message, "toast-bottom-left");
                        var file = renderFile(response.data)
                        $("#file-list tbody").append(file);
                    } else {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    }
                }
            })
        }
        function removeFile(id) {
            var data = {
                id: id,
                groupid : @group.Id
            }

            $.ajax({
                url: "@Url.Action("removefile", "file", new { area = "api"})",
                type: "POST",
                data: data,
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                        showToastr("success", response.message, "toast-bottom-left");
                        $(`[data-src="${id}"]`).parents("tr").fadeOut(500, function () {
                            $(this).remove();
                        })
                    } else {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    }
                }
            })
        }
        function renderFile(file) {
            return `<tr>
                        <td>
                            <a href="href="/file/download/${file.id}">
                                ${file.name}
                            </a>
                        </td>
                        <td style="text-align:center">
                            <button class="btn btn-primary-theme waves-effect btn-file-changename" data-src="${file.id}" data-toggle="tooltip" data-placement="top" title="Change Name">
                                <i class=" icon-pencil"></i>
                            </button>
                            <button class="btn btn-danger waves-effect btn-file-remove" data-src="${file.id}" data-toggle="tooltip" data-placement="top" title="Remove">
                                <i class="icon-trash"></i>
                            </button>
                        </td>
                    </tr>`

        }
        function changeFileName(id,filename) {
            var data = {
                id: id,
                groupid: @group.Id,
                filename: filename
            }

            $.ajax({
                url: "@Url.Action("changefilename", "file", new { area = "api"})",
                type: "POST",
                data: data,
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                        showToastr("success", response.message, "toast-bottom-left");
                        $(`[data-src="${id}"]`).parents("tr").find('td:first-child a').text(response.data.name);
                    } else {
                        showToastr("error", response.message, "toast-bottom-left");
                        console.error(response);
                    }
                }
            })
        }
    </script>
}