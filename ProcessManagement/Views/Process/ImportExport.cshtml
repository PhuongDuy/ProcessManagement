@model ProcessManagement.Models.Group
@{
    ViewBag.Title = "Import/Export Process";
    var processlist = ViewData["processes"] as List<ProcessManagement.Models.Process>;
    var group = ViewData["group"] as ProcessManagement.Models.Group;
}

@section CustomCss{
}
<div class="block-header">
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <a href="javascript:void(0);" class="btn btn-xs btn-link primary-theme btn-toggle-fullwidth primary-theme">
                <i class="fa fa-arrow-left"></i>
            </a>
            <ul class="breadcrumb">
                <li><a href="@Url.RouteUrl("GroupLocalizedDefault", new { controller = "group", action = "index"})"><i class="icon-home"></i></a></li>
                <li><a href="@Url.RouteUrl("GroupControlLocalizedDefault", new { controller = "group", action = "show", groupid = group.Id })">Group: @group.Name</a></li>
                <li><a href="javascript:void(0);"><i class="icon-cloud-upload"></i> Import / Export</a></li>
            </ul>
        </div>
    </div>
</div>
<div class="row clearfix">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card">
            <div class="header">
                <h5>Import Process</h5>
            </div>
            <div class="body" style="padding-top:0">
                <div id="process-import-container">
                    <input type="text" id="process-import-preview" class="form-control" readonly />
                    <input type="file" accept=".pms" id="process-import" style="display:none" />
                    <button class="btn btn-success waves-effect" id="btn-trigger" data-trigger="process-import">Browers</button>
                </div>
                <button class="btn btn-default waves-effect" id="btn-process-import" data-loading-text="<i class='fa fa-circle-o-notch fa-spin'></i> Uploading...">Upload</button>
            </div>
        </div>
    </div>
</div>
@section CustomScripts{
    <script>
        $(function () {
            $("#btn-trigger").on("click", function () {
                var target = $(this)[0].dataset.trigger;
                $(`#${target}`).trigger("click");
            });
            $("#process-import").on("change", function () {
                var preview = $("#process-import-preview");
                var $this = $(this);
                var upload = $(this)[0].files[0];

                preview.val(upload.name);
                if ($("#process-import-remove").length == 0) {
                    var remove = $(`<button class="btn btn-none waves-effect" id="process-import-remove"><i class="icon-trash"></i></button>`).insertBefore(preview);
                    remove.show(500);
                    remove.on("click", function () {
                        preview.val("");
                        $this.val("");
                        $(this).hide(500, () => { $(this).remove(); })
                    });
                }
            });
            $("#btn-process-import").on("click", function () {
                var upload = $("#process-import")[0].files[0];
                var $this = $(this);
                if (upload == undefined) {
                    showToastr("error", "You can't upload empty file", "toast-bottom-left");
                } else {
                    var data = new FormData();
                    data.append("groupid", @Model.Id);
                    data.append("fileupload", upload);
                    importProcess($this, data);
                    
                }
            });

        });
        function importProcess(element, data) {
            $.ajax({
                url: "@Url.Action("import", "process", new { area = "api" })",
                type: "POST",
                data: data,
                contentType: false,
                processData: false,
                dataType: "json",
                beforeSend: function () {
                    toggleLoading(element);
                },
                complete: function () {
                    toggleLoading(element);
                },
                success: function (response) {
                    console.log(response);
                    if (response.status == 200) {
                       
                    } else {
                        showToastr("error", response.message, "toast-bottom-left")
                        console.error(response)
                    }
                }
            });
        }
    </script>
}

